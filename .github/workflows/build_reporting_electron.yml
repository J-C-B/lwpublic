name: Build/Release Electron App
on: 
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Electron App (Windows)
    runs-on: windows-latest
    timeout-minutes: 30
    
    defaults:
      run:
        working-directory: ./Lacework-Compliance-Reporter
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Lacework-Compliance-Reporter/electron/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup virtual environment
        shell: bash
        run: |
          python -m venv venv
          if [ "$RUNNER_OS" = "Windows" ]; then
            venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          pip install -r requirements.txt
          
      - name: Install Electron dependencies
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm ci
        
      - name: Build Electron app
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-windows-${{ github.ref_name }}
          path: ./Lacework-Compliance-Reporter/dist/
          retention-days: 1

  build-macos:
    name: Build Electron App (macOS)
    runs-on: macos-latest
    timeout-minutes: 30
    
    defaults:
      run:
        working-directory: ./Lacework-Compliance-Reporter
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Lacework-Compliance-Reporter/electron/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
      - name: Install Electron dependencies
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm ci
        
      - name: Build Electron app
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-macos-${{ github.ref_name }}
          path: ./Lacework-Compliance-Reporter/dist/
          retention-days: 1

  build-linux:
    name: Build Electron App (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    defaults:
      run:
        working-directory: ./Lacework-Compliance-Reporter
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Lacework-Compliance-Reporter/electron/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
      - name: Install Electron dependencies
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm ci
        
      - name: Build Electron app
        working-directory: ./Lacework-Compliance-Reporter/electron
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-linux-${{ github.ref_name }}
          path: ./Lacework-Compliance-Reporter/dist/
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    defaults:
      run:
        working-directory: ./
    
    steps:
      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-build-windows-${{ github.ref_name }}
          path: ./dist-windows
          
      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-build-macos-${{ github.ref_name }}
          path: ./dist-macos
          
      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-build-linux-${{ github.ref_name }}
          path: ./dist-linux
          
      - name: Setup GitHub CLI
        run: |
          # Install GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Lacework Compliance Reporter ${{ github.ref_name }}
            
            ### What's New
            - Electron desktop application
            - Multi-platform installers (Windows, macOS, Linux)
            
            ### Installation
            Download the appropriate installer for your operating system:
            - **Windows**: `.exe` installer
            - **macOS**: `.dmg` disk image
            - **Linux**: `.AppImage` file
            
            ### Changes
            - Built with Electron for desktop distribution
            - Includes all Python dependencies
            - Streamlit web interface wrapped in desktop app
            - Cross-platform support
          draft: false
          prerelease: false
          
      - name: Find and Upload Windows Installer
        run: |
          # Find the Windows installer file
          WINDOWS_INSTALLER=$(find ./dist-windows -name "*.exe" -type f | head -n 1)
          if [ -n "$WINDOWS_INSTALLER" ]; then
            echo "Found Windows installer: $WINDOWS_INSTALLER"
            gh release upload ${{ github.ref_name }} "$WINDOWS_INSTALLER" --repo ${{ github.repository }}
          else
            echo "❌ No Windows .exe installer found"
            ls -la ./dist-windows/
          fi
          
      - name: Find and Upload macOS Installer
        run: |
          # Find the macOS installer file
          MACOS_INSTALLER=$(find ./dist-macos -name "*.dmg" -type f | head -n 1)
          if [ -n "$MACOS_INSTALLER" ]; then
            echo "Found macOS installer: $MACOS_INSTALLER"
            gh release upload ${{ github.ref_name }} "$MACOS_INSTALLER" --repo ${{ github.repository }}
          else
            echo "❌ No macOS .dmg installer found"
            ls -la ./dist-macos/
          fi
          
      - name: Find and Upload Linux Installer
        run: |
          # Find the Linux installer file
          LINUX_INSTALLER=$(find ./dist-linux -name "*.AppImage" -type f | head -n 1)
          if [ -n "$LINUX_INSTALLER" ]; then
            echo "Found Linux installer: $LINUX_INSTALLER"
            gh release upload ${{ github.ref_name }} "$LINUX_INSTALLER" --repo ${{ github.repository }}
          else
            echo "❌ No Linux .AppImage installer found"
            ls -la ./dist-linux/
          fi 
